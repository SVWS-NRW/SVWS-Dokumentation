import{_ as e,y as i,x as t,W as n}from"./plugin-vue_export-helper.68280688.js";var r="/assets/Minimum_Weight_Bipartite_Matching_mit_Dijkstra.08f8dd79.png",a="/assets/Maximum_Bipartite_Matching_mit_Breitensuche.4414eb7b.png";const b='{"title":"Blockungsalgorithmen","description":"","frontmatter":{},"headers":[{"level":2,"title":"Minimum/Maximum Weight Bipartite Matching (Assignment Problem)","slug":"minimum-maximum-weight-bipartite-matching-assignment-problem"},{"level":2,"title":"Maximum Cardinality Bipartite Matching","slug":"maximum-cardinality-bipartite-matching"}],"relativePath":"Algorithmen/Blockungs-Algorithmus/Blockungsalgorithmen.md","lastUpdated":1649312617188}',m={},h=n('<h1 id="blockungsalgorithmen" tabindex="-1">Blockungsalgorithmen <a class="header-anchor" href="#blockungsalgorithmen" aria-hidden="true">#</a></h1><h2 id="minimum-maximum-weight-bipartite-matching-assignment-problem" tabindex="-1">Minimum/Maximum Weight Bipartite Matching (Assignment Problem) <a class="header-anchor" href="#minimum-maximum-weight-bipartite-matching-assignment-problem" aria-hidden="true">#</a></h2><p>Ein minimales gewichtetes bipartites Matching ist ein Graphalgorithmus der eine Zuordnung auf einem gewichteten bipartiten Graphen minimiert.</p><p><a href="https://en.wikipedia.org/wiki/Maximum_weight_matching" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Maximum_weight_matching</a></p><p>Man stelle sich eine linke Knotenmenge (z.B. Sch\xFClerInnen) und eine rechte Knotenmenge (z.B. St\xFChle bei w\xE4hlbaren Projekte) vor. Zudem k\xF6nnen die Sch\xFClerInnen die Projekte mit einer ganzen Zahl bewerten (kleine Zahl = beliebter). Intern werden die Zahlen in einer Matrix gespeichert. Eine Zeile entspricht der Bewertung einer Sch\xFClerIn, die Spalten der Stuhl eines bewerteten Projektes. Der Algorithmus ordnet nun allen Sch\xFClerInnen genau einen Stuhl zu und minimiert dabei die Summe aller Zuordnungen, also die Gesamtzufriedenheit. Die Methode &quot;gibMinimalesBipartitesMatchingGewichtet&quot; der Klasse &quot;Matrix&quot; implementiert diesen Algorithmus mit Hilfe des Dijkstra-Algorithmus als Subroutine.</p><p><a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Dijkstra&#39;s_algorithm</a></p><p>Die Laufzeit bei einer quadratischen Matrix mit Dimension n betr\xE4gt O(n\xB3).</p><p>Es folgt eine Darstellung der internen Arbeitsweise des Algorithmus:</p><p><img src="'+r+'" alt="Minimum Weight Bipartite Matching mit Dijkstra.png"></p><h2 id="maximum-cardinality-bipartite-matching" tabindex="-1">Maximum Cardinality Bipartite Matching <a class="header-anchor" href="#maximum-cardinality-bipartite-matching" aria-hidden="true">#</a></h2><p>Ein maximales (ungewichtetes) bipartites Matching ist ein Graphalgorithmus der eine Zuordnung auf einem (ungewichteten) bipartiten Graphen maximiert.</p><p><a href="https://en.wikipedia.org/wiki/Maximum_cardinality_matching" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Maximum_cardinality_matching</a></p><p>Man stelle sich eine linke Knotenmenge (z.B. Sch\xFClerInnen) und eine rechte Knotenmenge (z.B. St\xFChle bei w\xE4hlbaren Projekten) vor. Es sind nur linke Knoten mit rechten Knoten verbunden (= bipartiter Graph). Eine Kantenverbindung zu jedem Sitzplatz eines Projektes w\xFCrde man dann setzen, wenn ein/e Sch\xFClerIn an einem Projekt teilnehmen m\xF6chte. Bei diesem Algorithmus gibt es keine Gewichtung/Priorisierung von Projekten. Der Algorithmus ordnet nun die maximale Anzahl an Sch\xFClerInnen den gew\xFCnschten Projektes zu, ohne dabei die maximale Teilnehmerzahl (= Sitzpl\xE4tze) pro Projekt zu \xFCberschreiten. Die Methode &quot;gibMaximalesBipartitesMatching&quot; der Klasse &quot;Matrix&quot; implementiert diesen Algorithmus mit Hilfe einer Breitensuche als Subroutine. Die Laufzeit bei N Knoten betr\xE4gt O(n\xB3). Schnellere Algorithmen existieren O(n^2.5), sind aber wesentlich komplizierter.</p><p><img src="'+a+'" alt="Maximum Bipartite Matching mit Breitensuche.png"></p>',14),s=[h];function l(o,g,u,p,c,d){return t(),i("div",null,s)}var k=e(m,[["render",l]]);export{b as __pageData,k as default};
