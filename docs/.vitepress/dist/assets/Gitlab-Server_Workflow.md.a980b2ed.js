import{_ as e,y as r,x as n,W as t}from"./plugin-vue_export-helper.68280688.js";var i="/assets/Gitflow-Workflow-1.a32272cd.png",a="/assets/Gitflow-Workflow-2.6d98123e.png",o="/assets/Gitflow-Workflow-3.92c88e14.png",s="/assets/Gitflow-Workflow-4.a7d34408.png",l="/assets/Gitflow-Workflow-5.1fce884c.png";const k='{"title":"Software","description":"","frontmatter":{},"headers":[{"level":2,"title":"\xDCbersicht: Git Projekte","slug":"ubersicht-git-projekte"},{"level":2,"title":"Workflow Development","slug":"workflow-development"},{"level":3,"title":"Erstellen eines Feature-Branch","slug":"erstellen-eines-feature-branch"},{"level":3,"title":"T\xE4gliche Arbeit im Feature-Branch","slug":"tagliche-arbeit-im-feature-branch"},{"level":3,"title":"R\xFCckf\xFChrung in den Develop-Branch","slug":"ruckfuhrung-in-den-develop-branch"},{"level":3,"title":"Problembehandlung","slug":"problembehandlung"},{"level":2,"title":"Anlegen eine neuen Release-Branch","slug":"anlegen-eine-neuen-release-branch"},{"level":2,"title":"Hotfixes im laufenden Release","slug":"hotfixes-im-laufenden-release"}],"relativePath":"Gitlab-Server/Workflow.md","lastUpdated":1649312336115}',d={},h=t('<h1 id="git-workflow" tabindex="-1"><em><strong>Git Workflow</strong></em> <a class="header-anchor" href="#git-workflow" aria-hidden="true">#</a></h1><h1 id="software" tabindex="-1">Software <a class="header-anchor" href="#software" aria-hidden="true">#</a></h1><p>Um an den Repositories mitzuarbeiten ben\xF6tigt man git:</p><ul><li>unter Linux: <code>apt install git</code></li><li>unter Windows download <a href="https://gitforwindows.org/" target="_blank" rel="noopener noreferrer">gitBash</a></li></ul><h1 id="repositories" tabindex="-1">Repositories <a class="header-anchor" href="#repositories" aria-hidden="true">#</a></h1><p>Beim Development des SVWS-Servers soll die Versionierung (v0.1, v0.2, ... ) im Master branch festgehalten werden.</p><p>Die eigentliche Arbeit des Developmentteams findet auf dem Develop-Branch statt:</p><p><img src="'+i+`" alt="Gitflow-Workflow-1"></p><p>Urheber der Grafik: <a href="https://infos.seibert-media.net/display/Productivity/Git-Workflows+-+Der+Gitflow-Workflow" target="_blank" rel="noopener noreferrer">seibert-media.net</a> ver\xF6ffentlicht unter <a href="https://infos.seibert-media.net/display/seibertmedia/Inhalte+von+Seibert+Media+unter+Creative-Commons-Lizenz" target="_blank" rel="noopener noreferrer">creative-common-lizens</a></p><h2 id="ubersicht-git-projekte" tabindex="-1">\xDCbersicht: Git Projekte <a class="header-anchor" href="#ubersicht-git-projekte" aria-hidden="true">#</a></h2><p>Das Projekt ma\xDFgeblich auf <a href="https://git.svws-nrw.de" target="_blank" rel="noopener noreferrer">git.svws-nrw.de</a> entwickelt:</p><pre><code>	git clone https://git.svws-nrw.de/svws/SVWS-Server
	git clone https://git.svws-nrw.de/svws/SVWS-UI-Framework
	git clone https://git.svws-nrw.de/svws/SVWS-Client
</code></pre><p>Diese drei genannten Repositories werden in Zukunft zu einem zusammengefasst. Ebenso findet man einen Spiegel der Repositries unter <a href="https://github.com/FPfotenhauer?tab=repositories" target="_blank" rel="noopener noreferrer">Github</a>:</p><ul><li><a href="https://github.com/FPfotenhauer/SVWS-Client" target="_blank" rel="noopener noreferrer">github.com/FPfotenhauer/SVWS-Client</a></li><li><a href="https://github.com/FPfotenhauer/SVWS-Server" target="_blank" rel="noopener noreferrer">github.com/FPfotenhauer/SVWS-Server</a></li><li><a href="https://github.com/SVWS-NRW/SVWS-UI-Framework" target="_blank" rel="noopener noreferrer">github.com/SVWS-NRW/SVWS-UI-Framework</a></li></ul><p>Je nach Bet\xE4tigungsfeld und Berechtigung macht es auch Sinn weitere Repositories zu clonen:</p><pre><code>	git clone https://git.svws-nrw.de/svws/svws-dokumentation
	git clone https://git.svws-nrw.de/svws/SVWS-TestMDBs
	git clone https://git.svws-nrw.de/svws/SVWS-Packages
	git clone https://git.svws-nrw.de/svws/SVWS-Transpiler
	git clone https://git.svws-nrw.de/svws/jbcrypt
</code></pre><h2 id="workflow-development" tabindex="-1">Workflow Development <a class="header-anchor" href="#workflow-development" aria-hidden="true">#</a></h2><h3 id="erstellen-eines-feature-branch" tabindex="-1">Erstellen eines Feature-Branch <a class="header-anchor" href="#erstellen-eines-feature-branch" aria-hidden="true">#</a></h3><p>Nachdem man die f\xFCr seine Arbeit erforderlichen Repositories gecloned hat wechselt man f\xFCr die Entwicklungsarbeit zun\xE4chst auf den Developer-Branch:</p><pre><code>	git checkout dev
</code></pre><p>Zur Kontrolle, auf welchen Branch man sich befindet:</p><pre><code>	git branch
</code></pre><p>Ausgehend vom Develeper Branch erstellt sich der einzelne Entwickler bzw die Kleinstgruppe einen eigenen Feature-Branch. Zum Beispiel:</p><pre><code>	git branch my_feature
	git checkout my_feature
	git push -u origin my_feature
</code></pre><p><img src="`+a+`" alt="Gitflow-Workflow-2"></p><p>Urheber der Grafik: <a href="https://infos.seibert-media.net/display/Productivity/Git-Workflows+-+Der+Gitflow-Workflow" target="_blank" rel="noopener noreferrer">seibert-media.net</a> ver\xF6ffentlicht unter <a href="https://infos.seibert-media.net/display/seibertmedia/Inhalte+von+Seibert+Media+unter+Creative-Commons-Lizenz" target="_blank" rel="noopener noreferrer">creative-common-lizens</a></p><h3 id="tagliche-arbeit-im-feature-branch" tabindex="-1">T\xE4gliche Arbeit im Feature-Branch <a class="header-anchor" href="#tagliche-arbeit-im-feature-branch" aria-hidden="true">#</a></h3><p>In dem t\xE4glichen Ablauf wird auf dem lokal geclonten Verzeichnis der neue Code gespeichert ggf. neue Dateien abgelegt oder Dateien gel\xF6scht. Alle neuen Dateien, die ins Verzeichnis gespeichert wurden werden im lokalen Repository beigef\xFCgt durch:</p><pre><code>	git add -A
</code></pre><p>Alle diese \xC4nderungen werden automatisch lokal versioniert mit:</p><pre><code>	git commit -a
</code></pre><p>Am Ende eines Arbeitstages m\xF6chte man gerne die durch commit angelegten Versionen auch auf dem Server vorhalten durch:</p><pre><code>	git push
</code></pre><h3 id="ruckfuhrung-in-den-develop-branch" tabindex="-1">R\xFCckf\xFChrung in den Develop-Branch <a class="header-anchor" href="#ruckfuhrung-in-den-develop-branch" aria-hidden="true">#</a></h3><p>Nach mehreren Commits ist ggf. das Feature fertig bzw. auf dem Stand einer Beta-Version, die Einzug halten kann in den Develop-Branch. Per Pull-Requests bittet man nun die Zust\xE4ndigen, das Feature in den Develop-Branch zu mergen. Je nach Berechtigung kann man es auch selbst\xE4ndig wie folgt in den lokalen Develop-Branch mergen und in das zentrale Repository pushen:</p><p>Aktualisieren und Wechseln ins Develop-Branch</p><pre><code>	git pull origin develop
	git checkout develop
</code></pre><p>Zusammenf\xFChren und zum Git_Server pushen:</p><pre><code>	git merge my_feature
	git push
</code></pre><p>Falls die Entwicklung des Features abgeschlossen ist kann man ggf das lokale Branch l\xF6schen mit:</p><pre><code>	git branch -d some-feature
</code></pre><h3 id="problembehandlung" tabindex="-1">Problembehandlung <a class="header-anchor" href="#problembehandlung" aria-hidden="true">#</a></h3><pre><code>	git status 
</code></pre><p>Gibt den Stand des lokal vorgehaltenen Repositories bzgl. des ausgew\xE4hlten Branches auf dem Git-Server an.</p><p>Falls mehrere Developer auf einem Branch arbeiten ist es wichtig zun\xE4chst mit einem Pull die letzten \xC4nderungen vom Server zum lokalen Repository zu syncronisieren.</p><pre><code>	git pull 
</code></pre><p>TODO: Frank fragen, wann er rebase einsetzt ....</p><pre><code>	git rebase
</code></pre><h1 id="workflow-releases" tabindex="-1">Workflow Releases <a class="header-anchor" href="#workflow-releases" aria-hidden="true">#</a></h1><h2 id="anlegen-eine-neuen-release-branch" tabindex="-1">Anlegen eine neuen Release-Branch <a class="header-anchor" href="#anlegen-eine-neuen-release-branch" aria-hidden="true">#</a></h2><pre><code>	git checkout -b release-0.1 develop
</code></pre><p>Im Grunde wird ein Release analog zum oben beschriebenen Vorgehen bei einzelnen Features von Develop-Branch abgetrennt. Ziel ist dann jedoch nicht eine weiterf\xFChrende Programmierung sondern ein intensieves Testen auf dem eingefrohrenen Zustand und eine Vorbereitung der Softwareauslieferung.</p><p><img src="`+o+'" alt="Gitflow-Workflow-3"></p><p>Urheber der Grafik: <a href="https://infos.seibert-media.net/display/Productivity/Git-Workflows+-+Der+Gitflow-Workflow" target="_blank" rel="noopener noreferrer">seibert-media.net</a> ver\xF6ffentlicht unter <a href="https://infos.seibert-media.net/display/seibertmedia/Inhalte+von+Seibert+Media+unter+Creative-Commons-Lizenz" target="_blank" rel="noopener noreferrer">creative-common-lizens</a></p><h2 id="hotfixes-im-laufenden-release" tabindex="-1">Hotfixes im laufenden Release <a class="header-anchor" href="#hotfixes-im-laufenden-release" aria-hidden="true">#</a></h2><p><img src="'+s+'" alt="Gitflow-Workflow-4"></p><p>Urheber der Grafik: <a href="https://infos.seibert-media.net/display/Productivity/Git-Workflows+-+Der+Gitflow-Workflow" target="_blank" rel="noopener noreferrer">seibert-media.net</a> ver\xF6ffentlicht unter <a href="https://infos.seibert-media.net/display/seibertmedia/Inhalte+von+Seibert+Media+unter+Creative-Commons-Lizenz" target="_blank" rel="noopener noreferrer">creative-common-lizens</a></p><p><img src="'+l+'" alt="Gitflow-Workflow-5"></p><p>Urheber der Grafik: <a href="https://infos.seibert-media.net/display/Productivity/Git-Workflows+-+Der+Gitflow-Workflow" target="_blank" rel="noopener noreferrer">seibert-media.net</a> ver\xF6ffentlicht unter <a href="https://infos.seibert-media.net/display/seibertmedia/Inhalte+von+Seibert+Media+unter+Creative-Commons-Lizenz" target="_blank" rel="noopener noreferrer">creative-common-lizens</a></p>',59),c=[h];function p(f,u,g,m,b,w){return n(),r("div",null,c)}var _=e(d,[["render",p]]);export{k as __pageData,_ as default};
