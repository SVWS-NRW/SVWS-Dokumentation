import{_ as e,y as n,x as t,W as s}from"./plugin-vue_export-helper.68280688.js";const m='{"title":"siehe unten init.sh","description":"","frontmatter":{},"relativePath":"Entwicklungsumgebungen/Multipass/index.md","lastUpdated":1649311654587}',r={},i=s(`<p><strong>Achtung, hier sind noch die Angaben f\xFCr GitHub. Bitte f\xFCr Gitlab anpassen.</strong></p><p><a href="https://multipass.run" target="_blank" rel="noopener noreferrer">Multipass</a> ist ein sehr einfaches Tool zur Erstellung von virtuellen Testumgebungen. Es wird die jeweilige vom Betriebssystem zur Verf\xFCgung gestellte Virtualisierungsumgebung genutzt. F\xFCr eine SVWS-Testumgebung ideal.</p><p>Je nach Betriebssystem muss multipass zumindest installiert werden, der Rest wird virtualisiert:</p><p>z.B. unter macOS (momentan nur f\xFCr Intel CPU) kann man mit Hilfe von <a href="https://brew.sh" target="_blank" rel="noopener noreferrer">Homebrew</a> so vorgehen:</p><div class="language-bash"><pre><code>brew <span class="token function">install</span> multipass
</code></pre></div><p>Anschlie\xDFend wird die VM eingerichtet:</p><div class="language-bash"><pre><code>multipass launch -m 4GB -n alpha
multipass transfer init.sh alpha:
multipass GymAbi.mdb alpha:
multipass shell alpha
</code></pre></div><p>Hier nenne ich meine VM <code>alpha</code> und erstelle sie mit 4GB Hauptspeicher. Die Standardvorgabe von 1GB reicht nicht aus f\xFCr den SVWS-Server. anschlie\xDFend \xFCbertrage ich das Init-Skript und eine Testdatenbank (hier die GymAbi.mdb) und starte ancschlie\xDFend die Shell.</p><p>In der alpha vm weiter:</p><div class="language-bash"><pre><code><span class="token function">chmod</span> +x init.sh
./init.sh
</code></pre></div><p>Das Skript wird als ausf\xFChrbar markiert und gestartet.</p><p>Beim Durchlaufen des Skripts passieren folgende Dinge:</p><div class="language-bash"><pre><code><span class="token comment"># siehe unten init.sh</span>

</code></pre></div><p>Sobald das Skript durchgelaufen ist, sollte die VM den Server/Client mit vollst\xE4ndiger Testumgebung zur Verf\xFCgung stellen und ist auch von au\xDFen erreichbar.</p><p>Um die IP der VM festzustellen frage sie per <code>multipass ls</code> ab. Die <code>alpha</code> VM wird dann mit IP angezeigt.</p><p>Als root-Passwort f\xFCr die MariaDB ist f\xFCr weitere Aktionen <code>svwsadmin</code> gesetzt, f\xFCr die neu erstelle Datenbank aus dem GyAbi.mdb-Import wurde der Benutzer <code>Admin</code> ohne Passwort gesetzt.</p><p>Damit das Skript erfolgreich laufen kann, muss noch ein Github-Token erstellt werden, ein Zugriff auf die Github-Repos der SVWS-NRW Organisation vorausgesetzt. Dazu in Github anmelden und dann unter der Adresse <a href="https://github.com/settings/tokens" target="_blank" rel="noopener noreferrer">https://github.com/settings/tokens</a> einen Token mit den Voreinstellungen erstellen. Diesen Token speichern, da er nicht wieder angezeigt wird. In das oben angegebene Skript eintragen und vollst\xE4ndig als <code>init.sh</code> abspeichern.</p><p>Da der Server mit diesem Script automatisch gestartet wird, kann er auch \xFCber die IP erreicht werden, entweder als <code>https://ip_des_servers</code> in der <code>build</code>-Version oder anschlie\xDFend, wenn man m\xF6chte, auch als <code>development</code>-Version \xFCber den Port 3000 und <code>http</code>. Zuvor sollte der client dann per <code>npm run dev</code> gestartet werden.</p><p>Theoretisch kann mit dieser VM auch gearbeitet werden, alle Voraussetzungen daf\xFCr sind gegeben. Da sich jedoch alles in der VM abspielt, ist es sinnvoll z.B. VS Code mit der Remote SSH Erweiterung zu verwenden.</p>`,19),a=[i];function d(o,l,p,u,c,h){return t(),n("div",null,a)}var b=e(r,[["render",d]]);export{m as __pageData,b as default};
