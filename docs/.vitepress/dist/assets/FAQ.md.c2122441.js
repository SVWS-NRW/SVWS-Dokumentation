import{_ as e,y as n,x as r,W as t}from"./plugin-vue_export-helper.68280688.js";const w='{"title":"H\xE4ufig gestellte Fragen","description":"","frontmatter":{},"headers":[{"level":2,"title":"Fragen zum Projekt","slug":"fragen-zum-projekt"},{"level":2,"title":"Grundlegende Entscheidungen","slug":"grundlegende-entscheidungen"},{"level":2,"title":"Datenbankuser bei Migration","slug":"datenbankuser-bei-migration"},{"level":2,"title":"Verwendung eines CSS-Frameworks","slug":"verwendung-eines-css-frameworks"},{"level":2,"title":"JSweet zur Auslagerung der Algorithmik in den Browser","slug":"jsweet-zur-auslagerung-der-algorithmik-in-den-browser"},{"level":2,"title":"Selbst signierte Zertifikate akzeptieren","slug":"selbst-signierte-zertifikate-akzeptieren"}],"relativePath":"FAQ.md","lastUpdated":1649311654592}',i={},s=t(`<h1 id="haufig-gestellte-fragen" tabindex="-1">H\xE4ufig gestellte Fragen <a class="header-anchor" href="#haufig-gestellte-fragen" aria-hidden="true">#</a></h1><p>Inhaltsverzeichnis</p><ul><li><a href="#fragen-zum-projekt">Fragen zum Projekt</a></li><li><a href="#grundlegende-entscheidungen">Grundlegende Entscheidungen</a></li><li><a href="#datenbankuser-bei-migration">Datenbankuser bei Migration</a></li><li><a href="#verwendung-eines-css-frameworks">Verwendung eines CSS-Frameworks</a></li><li><a href="#jsweet-zur-auslagerung-der-algorithmik-in-den-browser">JSweet zur Auslagerung der Algorithmik in den Browser</a></li><li><a href="#selbst-signierte-zertifikate-akzeptieren">Selbst signierte Zertifikate akzeptieren</a></li></ul><h2 id="fragen-zum-projekt" tabindex="-1">Fragen zum Projekt <a class="header-anchor" href="#fragen-zum-projekt" aria-hidden="true">#</a></h2><p>An dieser Stelle werden Fragen bzw. Antworten gesammelt, die w\xE4hrend der Entwicklung des Projektes entstehen.</p><p>Es handelt sich auch vielfach um Entscheidungen, die getroffen wurden oder noch getroffen werden m\xFCssen.</p><p>Entwickler, die zu einem sp\xE4teren Zeitpunkt auf das Projekt sto\xDFen, sollen hier auch Informationen bekommen, warum bestimmte Entscheidungen getroffen wurden. Oder es sollen Informationen gegeben werden, dass Features in Richtungen geplant sind, aber eben noch nicht umgesetzt.</p><h2 id="grundlegende-entscheidungen" tabindex="-1">Grundlegende Entscheidungen <a class="header-anchor" href="#grundlegende-entscheidungen" aria-hidden="true">#</a></h2><p>Die Auswahl der Programmiersprachen wurde haupts\xE4chlich aus der Motivation getroffen, dass das Projekt als OpenSource sp\xE4ter allen Schulen zur Verf\xFCgung stehen soll. Damit war die Entscheidung, dass ausschlie\xDFlich plattform\xFCbergreifende L\xF6sungen in Frage kommen getroffen. Das Core-Projekt wird in Java programmiert und soll so einen skalierbaren Serverbetrieb erm\xF6glichen, der unabh\xE4ngig vom genutzten Betriebssystem zur Verf\xFCgung gestellt werden kann.</p><p>Die Auswahl von HTML, CSS, TypeScript mit VUE.JS wurde sehr stark von der Frage der Flexibilit\xE4t gepr\xE4gt. Au\xDFerdem hat das Projekt bisher wenig Altlasten was den Code angeht, der die Gesch\xE4ftsprozesse der Schulverwaltung angeht. Bestehende Algorithmen und Abl\xE4ufe bleiben in Schild-NRW-2.0 und Schild-NRW-3.0 erhalten. Es war allen beteiligten Entwicklern klar, dass neue Abschlussberechnungen und Gruppenprozesse usw. sowieso als Dienste v\xF6llig neu programmiert werden m\xFCssen. Au\xDFerdem kam eine Portierung aus dem Delphi-Code so gesehen auch nicht in Frage.</p><p>Hier einige Links zu Artikeln, die im Nachhinein die Entscheidungen unterst\xFCtzen.</p><ul><li><p><a href="https://www.heise.de/news/Kommentar-So-kann-Microsoft-die-Abwanderung-von-NET-Entwicklern-nicht-stoppen-4725901.html" target="_blank" rel="noopener noreferrer">Heise Artikel zu Softwareentwicklungen</a></p></li><li><p><a href="https://www.heise.de/developer/meldung/Renovierungsplaene-fuer-Phabricator-mit-Vue-js-4687279.html" target="_blank" rel="noopener noreferrer">MediaWiki einigt sich auf VUE.js</a></p></li><li><p><a href="https://www.heise.de/news/Gruen-Rot-Stadt-Muenchen-soll-rasch-fuenf-Open-Source-Projekte-entwickeln-4937719.html" target="_blank" rel="noopener noreferrer">Die Stadt M\xFCnchen will zwingend OpenSource entwickeln lassen</a></p></li><li><p><a href="https://www.egovernment-computing.de/leistungsfaehige-it-services-fuer-hessische-schulverwaltung-durch-innovation-und-team-arbeit-a-536808/" target="_blank" rel="noopener noreferrer">LUSD muss flexibler werden.....</a></p></li><li><p><a href="https://www.egovernment-computing.de/zwischen-open-source-und-open-standards-a-959060/" target="_blank" rel="noopener noreferrer">eGovernment zum Thema OpenSource und offenen Standards</a></p></li></ul><h2 id="datenbankuser-bei-migration" tabindex="-1">Datenbankuser bei Migration <a class="header-anchor" href="#datenbankuser-bei-migration" aria-hidden="true">#</a></h2><p>Der root-Benutzer sollte nicht in der Konfiguration eingetragen sein. Deswegen ist dies auch so gar nicht vorgesehen. Die API um eine Migration vorzunehmen kann allerdings mit einem root-Benutzer durchgef\xFChrt werden und ist insbesondere f\xFCr den Installer vorgesehen.</p><p>Im CORE_Projekt muss aber noch dieses bereits geplante, aber noch nicht umgesetzte, Feature erg\xE4nzt werden, dass dieser Teil der Schnittstelle per Default abgestellt ist und nur gezielt \xFCber die svwsconfig-Datei aktiviert werden kann. In dieser Konfigurationsdatei ist \xFCbrigens, wie oben beschrieben, der schildadmin vorgesehen. Dieser hat erh\xF6hte Rechte, um Tabellen, etc. anzulegen.</p><p>Das Anlegen eines weiteren Schemas ist nur f\xFCr Multi-DB-Umgebungen vorgesehen, welche in Schulungsumgebungen vorkommen. Schultr\xE4ger sollten f\xFCr unterschiedliche Schulen aus meiner Sicht sowieso unterschiedliche DB-Installationen verwenden, wodurch diese Problematik dann erst gar nicht auftaucht.</p><h2 id="verwendung-eines-css-frameworks" tabindex="-1">Verwendung eines CSS-Frameworks <a class="header-anchor" href="#verwendung-eines-css-frameworks" aria-hidden="true">#</a></h2><p>Ein gutes reines CSS-Framework kann Arbeit ersparen. Interessant ist aber auch die Handhabung solcher Frameworks bei der Entwicklung. Eine Unterst\xFCtzung unterschiedlicher Themes ist auch interessant. Wenn in dem Bereich der UI-Framworks Erfahrung vorliegt, dann sollte man das Einbinden des CSS-Frameworks in das bestehende Client-Projekt an einem Beispiel demonstrieren. Eine Verbesserung w\xE4re auch hier w\xFCnschenswert...</p><h2 id="jsweet-zur-auslagerung-der-algorithmik-in-den-browser" tabindex="-1">JSweet zur Auslagerung der Algorithmik in den Browser <a class="header-anchor" href="#jsweet-zur-auslagerung-der-algorithmik-in-den-browser" aria-hidden="true">#</a></h2><p>Damit Teile des Codes im Browser auf dem Client ausgef\xFChrt werden k\xF6nnen un dsomit nicht die Prozessorleitsung des Server genutzt werden muss, wenn rechenintensive Prozesse angesto\xDFen werden, wird der Code mittels JSweet in Javascript oder Typyscript \xFCbersetzt.</p><p><a href="http://www.jsweet.org/" target="_blank" rel="noopener noreferrer">http://www.jsweet.org/</a></p><p>Dieser Transpiler \xFCbersetzt Java direkt in Javascript. Daf\xFCr m\xFCssen bei der Gestaltung des Codes einige Dinge beachtet werden, so d\xFCrfen z.B. keine Lambda-Ausdr\xFCcke verwendet werden. Dies muss von den Entwikclern des Codes beachtet werden und sollte gut dokumentiert werden.</p><h2 id="selbst-signierte-zertifikate-akzeptieren" tabindex="-1">Selbst signierte Zertifikate akzeptieren <a class="header-anchor" href="#selbst-signierte-zertifikate-akzeptieren" aria-hidden="true">#</a></h2><p>Solange die Schulverwaltungssoftware auf eigenen Servern oder Desktop-Rechnern in den Schulen betrieben werden muss, wird es in kleineren Systemen wichtg sein, dass die Https-Aufrufe \xFCber ein selbst signiertes Zertifikat laufen k\xF6nnen.</p><p>Unsch\xF6n wird es sein, wenn der User im Browser zun\xE4chst eine Fehlermeldung \xFCber eine unsichere Verbindung bekommt und dann den Browser \xFCber erweiterte Einstellungen dazu bringen muss das Zertifikat zu akzeptieren.</p><p>In gr\xF6\xDFeren Umgebungen, wo Schuldatenbanken von Rechenzentren gehostet werden, sollte der Betreiber ein Zertifikat besitzen und in den Keystore des SVWS-Server importieren.</p><p>Um das Problem auf Windows-Clients zu umgehen sollte mit dem Installer das SVWS-Server-Zertifikat im Windows Zertifikatsmanager importiert werden.</p><p>ausf\xFChren &gt; cmd</p><pre><code>certmgr.msc
</code></pre><p>Unter Firefox kann eingestellt werden, dass auch auf diese Zertifikate zugegriffen werden soll. Dazu muss in diesem Ordner: C:\\Program Files\\Mozilla Firefox\\defaults\\pref (Bei Standard-Installation)</p><p>Eine Datei mit dem Namen &#39;trustcert.js&#39; mit folgfendem Inhalt angelegt werden:</p><pre><code>	/* Allows Firefox reading Windows certificates */ pref(&quot;security.enterprise_roots.enabled&quot;, true);
</code></pre><p>F\xFCr Chrome und Edge scheint das nicht notwendig zu sein.</p>`,33),a=[s];function d(l,u,o,g,h,c){return r(),n("div",null,a)}var p=e(i,[["render",d]]);export{w as __pageData,p as default};
